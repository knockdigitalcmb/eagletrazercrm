import React, { useState } from "react";
import {
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormControlLabel,
  Checkbox,
  FormGroup,
  Button,
  Alert,
  Box,
  Grid,
} from "@mui/material";

const CreateUser: React.FC = () => {
  const [user, setUser] = useState({
    userId: "Auto Generated by Backend",
    userName: "",
    phoneNumber: "",
    email: "",
    location: "",
    address: "",
    password: "",
    profileImage: "",
    joiningDate: "",
    previousCompany: "",
    experienceYears: "",
    experienceMonths: "",
    role: "",
  });

  const [permissions, setPermissions] = useState({
    otpPageView: false,
    otpPageAdd: false,
    otpPageEdit: false,
    otpPageDelete: false,
    employeeView: false,
    employeeAdd: false,
    employeeEdit: false,
    employeeDelete: false,
    leadsView: false,
    leadsAdd: false,
    leadsEdit: false,
    leadsDelete: false,
    developerView: false,
    developerAdd: false,
    developerEdit: false,
    developerDelete: false,
  });

  const adminPermissions: { [key: string]: boolean } = {
    otpPageView: true,
    otpPageAdd: true,
    employeeView: true,
    employeeEdit: true,
    employeeDelete: true,
    // Other admin-specific permissions
  };

  const viewerPermissions: { [key: string]: boolean } = {
    otpPageView: true,
    employeeView: true,
    // Other viewer-specific permissions
  };

  const userRole = "admin"; // This could be dynamic, e.g., fetched from DB or session
  const userPermissions = userRole === "admin" ? adminPermissions : viewerPermissions;

  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setUser({ ...user, [e.target.name]: e.target.value });
  };

  const handlePermissionChange = (permission: string) => {
    setPermissions((prev) => ({ ...prev, [permission]: !prev[permission] }));
  };

  const validateForm = () => {
    let newErrors: { [key: string]: string } = {};
    if (!user.userName) newErrors.userName = "User Name is required";
    if (!user.phoneNumber) newErrors.phoneNumber = "Phone Number is required";
    if (!user.email) newErrors.email = "Email ID is required";
    if (!user.location) newErrors.location = "Location is required";
    if (!user.address) newErrors.address = "Address is required";
    if (!user.password) newErrors.password = "Password is required";
    if (!user.role) newErrors.role = "User Role is required";
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = () => {
    if (validateForm()) {
      console.log("User Data:", user);
      console.log("Permissions:", permissions);
    }
  };

  return (
    <Box sx={{ p: 4 }}>
      <Grid container spacing={4}>
        {/* Left Column - Basic Information */}
        <Grid item xs={12} md={6}>
          <Box sx={{ backgroundColor: "white", p: 4, borderRadius: 2, boxShadow: 2 }}>
            <h2 className="text-lg font-bold mb-4">Basic Information</h2>
            <div className="space-y-4">
              <TextField label="User ID" value={user.userId} disabled fullWidth variant="outlined" />
              <TextField
                label="User Name"
                name="userName"
                value={user.userName}
                onChange={handleChange}
                fullWidth
                variant="outlined"
                placeholder="Enter User Name"
                error={!!errors.userName}
                helperText={errors.userName}
              />
              <TextField
                label="Phone Number"
                name="phoneNumber"
                value={user.phoneNumber}
                onChange={handleChange}
                fullWidth
                variant="outlined"
                placeholder="Enter Phone Number"
                error={!!errors.phoneNumber}
                helperText={errors.phoneNumber}
              />
              <TextField
                label="Email ID"
                name="email"
                value={user.email}
                onChange={handleChange}
                fullWidth
                variant="outlined"
                placeholder="Enter Email ID"
                error={!!errors.email}
                helperText={errors.email}
              />
              <TextField
                label="Location"
                name="location"
                value={user.location}
                onChange={handleChange}
                fullWidth
                variant="outlined"
                placeholder="Enter Location"
                error={!!errors.location}
                helperText={errors.location}
              />
              <TextField
                label="Address"
                name="address"
                value={user.address}
                onChange={handleChange}
                fullWidth
                multiline
                rows={2}
                variant="outlined"
                placeholder="Enter Address"
                error={!!errors.address}
                helperText={errors.address}
              />
              <TextField
                label="Password"
                name="password"
                type="password"
                value={user.password}
                onChange={handleChange}
                fullWidth
                variant="outlined"
                placeholder="Enter Password"
                error={!!errors.password}
                helperText={errors.password}
              />
              <input
                type="file"
                name="profileImage"
                onChange={(e) => setUser({ ...user, profileImage: e.target.files?.[0]?.name || "" })}
                className="w-full p-2 border rounded"
              />
            </div>
          </Box>
        </Grid>

        {/* Right Column - Experience & Role */}
        <Grid item xs={12} md={6}>
          <Box sx={{ backgroundColor: "white", p: 4, borderRadius: 2, boxShadow: 2 }}>
            <h2 className="text-lg font-bold mb-4">Experience & Role</h2>
            <div className="space-y-4">
              <TextField
                label="Joining Date"
                name="joiningDate"
                type="date"
                value={user.joiningDate}
                onChange={handleChange}
                fullWidth
                variant="outlined"
                InputLabelProps={{ shrink: true }}
              />
              <TextField
                label="Previous Company"
                name="previousCompany"
                value={user.previousCompany}
                onChange={handleChange}
                fullWidth
                variant="outlined"
                placeholder="Enter Previous Company Name"
              />
              <TextField
                label="Experience (Years)"
                name="experienceYears"
                value={user.experienceYears}
                onChange={handleChange}
                fullWidth
                variant="outlined"
                placeholder="Enter Years of Experience"
              />
              <TextField
                label="Experience (Months)"
                name="experienceMonths"
                value={user.experienceMonths}
                onChange={handleChange}
                fullWidth
                variant="outlined"
                placeholder="Enter Months of Experience"
              />
            </div>
          </Box>
        </Grid>

        {/* Left Column - User Role */}
        <Grid item xs={12} md={6}>
          <Box sx={{ backgroundColor: "white", p: 4, borderRadius: 2, boxShadow: 2 }}>
            <h2 className="text-lg font-bold mb-4">User Role</h2>
            <FormControl fullWidth error={!!errors.role}>
              <InputLabel>User Role</InputLabel>
              <Select
                name="role"
                value={user.role || ""}
                onChange={(e) => setUser({ ...user, role: e.target.value })}
                label="User Role"
              >
                <MenuItem value="admin">Admin</MenuItem>
                <MenuItem value="lead">Lead</MenuItem>
                <MenuItem value="employee">Employee</MenuItem>
                <MenuItem value="developer">Developer</MenuItem>
              </Select>
             
            </FormControl>
          </Box>
        </Grid>

        {/* Right Column - User Permissions */}
        <Grid item xs={12} md={6}>
          <Box sx={{ backgroundColor: "white", p: 4, borderRadius: 2, boxShadow: 2 }}>
            <h2 className="text-lg font-bold mb-4">User Permissions</h2>
            <FormGroup>
              {/* OTP Page Permissions */}
              <Box sx={{ mt: 2 }}>
                <h3 className="font-bold mb-2">OTP Page</h3>
                <FormControlLabel
                  control={<Checkbox checked={permissions.otpPageView} onChange={() => handlePermissionChange("otpPageView")} />}
                  label="View"
                />
                <FormControlLabel
                  control={<Checkbox checked={permissions.otpPageAdd} onChange={() => handlePermissionChange("otpPageAdd")} />}
                  label="Add"
                />
                <FormControlLabel
                  control={<Checkbox checked={permissions.otpPageEdit} onChange={() => handlePermissionChange("otpPageEdit")} />}
                  label="Edit"
                />
                <FormControlLabel
                  control={<Checkbox checked={permissions.otpPageDelete} onChange={() => handlePermissionChange("otpPageDelete")} />}
                  label="Delete"
                />
              </Box>

              {/* Employee Permissions */}
              <Box sx={{ mt: 2 }}>
                <h3 className="font-bold mb-2">Employee</h3>
                <FormControlLabel
                  control={<Checkbox checked={permissions.employeeView} onChange={() => handlePermissionChange("employeeView")} />}
                  label="View"
                />
                <FormControlLabel
                  control={<Checkbox checked={permissions.employeeAdd} onChange={() => handlePermissionChange("employeeAdd")} />}
                  label="Add"
                />
                <FormControlLabel
                  control={<Checkbox checked={permissions.employeeEdit} onChange={() => handlePermissionChange("employeeEdit")} />}
                  label="Edit"
                />
                <FormControlLabel
                  control={<Checkbox checked={permissions.employeeDelete} onChange={() => handlePermissionChange("employeeDelete")} />}
                  label="Delete"
                />
              </Box>

              {/* Leads Permissions */}
              <Box sx={{ mt: 2 }}>
                <h3 className="font-bold mb-2">Leads</h3>
                <FormControlLabel
                  control={<Checkbox checked={permissions.leadsView} onChange={() => handlePermissionChange("leadsView")} />}
                  label="View"
                />
                <FormControlLabel
                  control={<Checkbox checked={permissions.leadsAdd} onChange={() => handlePermissionChange("leadsAdd")} />}
                  label="Add"
                />
                <FormControlLabel
                  control={<Checkbox checked={permissions.leadsEdit} onChange={() => handlePermissionChange("leadsEdit")} />}
                  label="Edit"
                />
                <FormControlLabel
                  control={<Checkbox checked={permissions.leadsDelete} onChange={() => handlePermissionChange("leadsDelete")} />}
                  label="Delete"
                />
              </Box>

              {/* Developer Permissions */}
              <Box sx={{ mt: 2 }}>
                <h3 className="font-bold mb-2">Developer</h3>
                <FormControlLabel
                  control={<Checkbox checked={permissions.developerView} onChange={() => handlePermissionChange("developerView")} />}
                  label="View"
                />
                <FormControlLabel
                  control={<Checkbox checked={permissions.developerAdd} onChange={() => handlePermissionChange("developerAdd")} />}
                  label="Add"
                />
                <FormControlLabel
                  control={<Checkbox checked={permissions.developerEdit} onChange={() => handlePermissionChange("developerEdit")} />}
                  label="Edit"
                />
                <FormControlLabel
                  control={<Checkbox checked={permissions.developerDelete} onChange={() => handlePermissionChange("developerDelete")} />}
                  label="Delete"
                />
              </Box>
            </FormGroup>
          </Box>
        </Grid>

        {/* Save Button */}
        <Grid item xs={12}>
          <Box sx={{ display: "flex", justifyContent: "flex-end" }}>
            <Button variant="contained" color="primary" onClick={handleSubmit}>
              Save
            </Button>
          </Box>
        </Grid>
      </Grid>
    </Box>
  );
};

export default CreateUser;