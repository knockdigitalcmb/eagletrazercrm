import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';

import {
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormControlLabel,
  Checkbox,
  FormGroup,
  Button,
  Alert,
  Box,
  Snackbar,
  Grid2,
  styled,
  Typography,
  SelectChangeEvent,
} from '@mui/material';
import CloudUploadIcon from '@mui/icons-material/CloudUpload';

import styles from './CreateUser.module.scss';

interface Permissions {
  otpPageView?: boolean;
  otpPageAdd?: boolean;
  employeeView?: boolean;
  employeeAdd?: boolean;
  employeeEdit?: boolean;
  employeeDelete?: boolean;
  leadsView?: boolean;
  leadsAdd?: boolean;
  leadsEdit?: boolean;
  leadsDelete?: boolean;
  developerView?: boolean;
  developerAdd?: boolean;
  developerEdit?: boolean;
  developerDelete?: boolean;
}

const CreateUser: React.FC = () => {
  const [user, setUser] = useState({
    userId: 'Auto Generated by Backend',
    userName: '',
    phoneNumber: '',
    email: '',
    location: '',
    address: '',
    password: '',
    profileImage: '',
    joiningDate: '',
    previousCompany: '',
    experienceYears: '',
    experienceMonths: '',
    role: '',
  });

  const [permissions, setPermissions] = useState<Permissions>({
    otpPageView: false,
    otpPageAdd: false,
    employeeView: false,
    employeeAdd: false,
    employeeEdit: false,
    employeeDelete: false,
    leadsView: false,
    leadsAdd: false,
    leadsEdit: false,
    leadsDelete: false,
    developerView: false,
    developerAdd: false,
    developerEdit: false,
    developerDelete: false,
  });

  const adminPermissions: Permissions = {
    otpPageView: true,
    otpPageAdd: true,
    employeeView: true,
    employeeAdd: true,
    employeeEdit: true,
    employeeDelete: true,
    leadsView: true,
    leadsAdd: true,
    leadsEdit: true,
    leadsDelete: true,
    developerView: true,
    developerAdd: true,
    developerEdit: true,
    developerDelete: true,
  };

  const viewerPermissions: Permissions = {
    otpPageView: true,
    employeeView: true,
    leadsView: true,
    developerView: true,
    otpPageAdd: false,
    employeeAdd: false,
    employeeEdit: false,
    employeeDelete: false,
    leadsAdd: false,
    leadsEdit: false,
    leadsDelete: false,
    developerAdd: false,
    developerEdit: false,
    developerDelete: false,
  };

  const { t } = useTranslation();
  const userRole = 'admin'; // This could be dynamic, e.g., fetched from DB or session
  const userPermissions =
    userRole === 'admin' ? adminPermissions : viewerPermissions;

  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const [selectedRole, setSelectedRole] = useState(''); // State for selected role
  const [open, setOpen] = useState(false);
  const [message, setMessage] = useState('');

  const onHandleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setUser({ ...user, [e.target.name]: e.target.value });
  };

  const onHandlePermissionChange = (permission: keyof Permissions) => {
    setPermissions((prevPermissions) => ({
      ...prevPermissions,
      [permission]: !(prevPermissions[permission] ?? false),
    }));
  };

  // Updated the event type to SelectChangeEvent<string>
  const onHandleRoleChange = (event: SelectChangeEvent<string>) => {
    const selectedRole = event.target.value;
    setUser((prevUser) => ({ ...prevUser, role: selectedRole }));
    setSelectedRole(selectedRole);
  };

  const permissionsList = [
    { key: 'otpPage', label: 'OTP Page', actions: ['View'] },
    {
      key: 'employee',
      label: 'Employee',
      actions: ['View', 'Add', 'Edit', 'Delete'],
    },
    {
      key: 'leads',
      label: 'Leads',
      actions: ['View', 'Add', 'Edit', 'Delete'],
    },
    {
      key: 'developer',
      label: 'Developer',
      actions: ['View', 'Add', 'Edit', 'Delete'],
    },
  ];

  const validateForm = () => {
    let newErrors: { [key: string]: string } = {};
    if (!user.userName) newErrors.userName = 'User Name is required';
    if (!user.phoneNumber) newErrors.phoneNumber = 'Phone Number is required';
    if (!user.email) newErrors.email = 'Email ID is required';
    if (!user.location) newErrors.location = 'Location is required';
    if (!user.address) newErrors.address = 'Address is required';
    if (!user.password) newErrors.password = 'Password is required';
    if (!user.role) newErrors.role = 'User Role is required';
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const onHandleSubmit = () => {
    if (validateForm()) {
      console.log('User Data:', user);
      console.log('Permissions:', permissions);
      setMessage('Details saved successfully!');
      setOpen(true);
    }
  };

  const VisuallyHiddenInput = styled('input')({
    clip: 'rect(0 0 0 0)',
    clipPath: 'inset(50%)',
    height: 1,
    overflow: 'hidden',
    position: 'absolute',
    bottom: 0,
    left: 0,
    whiteSpace: 'nowrap',
    width: 1,
  });

  return (
    <Box data-testid='createUser-page'>
      <Grid2 container spacing={10} className={styles.CreateUserContainer}>
        <Grid2 size={6} className={styles.CreateUserLeftContainer}>
          <Grid2 className={styles.basicInfoWrapper}>
            <Typography variant='h5' className={styles.createUserHeading}>
              Basic Information
            </Typography>
            <TextField
              placeholder='Employee Id'
              id='employee-ID'
              data-testid='employee-id'
            />
            <TextField
              name='userName'
              value={user.userName}
              onChange={onHandleChange}
              placeholder='Enter User Name'
              error={!!errors.userName}
              helperText={errors.userName}
            />
            <TextField
              name='phoneNumber'
              value={user.phoneNumber}
              onChange={onHandleChange}
              placeholder='Enter Phone Number'
              error={!!errors.phoneNumber}
              helperText={errors.phoneNumber}
            />
            <TextField
              name='email'
              value={user.email}
              onChange={onHandleChange}
              placeholder='Enter Email ID'
              error={!!errors.email}
              helperText={errors.email}
            />
            <TextField
              name='location'
              value={user.location}
              onChange={onHandleChange}
              placeholder='Enter Location'
              error={!!errors.location}
              helperText={errors.location}
            />
            <TextField
              name='address'
              value={user.address}
              onChange={onHandleChange}
              multiline
              rows={1}
              placeholder='Enter Address'
              error={!!errors.address}
              helperText={errors.address}
            />
            <TextField
              name='password'
              type='password'
              value={user.password}
              onChange={onHandleChange}
              placeholder='Enter Password'
              error={!!errors.password}
              helperText={errors.password}
            />
            <Button
              component='label'
              variant='contained'
              startIcon={<CloudUploadIcon />}
              className={styles.chooseFileButton}
            >
              Choose file
              <VisuallyHiddenInput type='file' multiple />
            </Button>
          </Grid2>

          <Grid2 className={styles.experienceWrapper}>
            <Typography className={styles.createUserHeading}>
              Experiences
            </Typography>
            <TextField
              name='joiningDate'
              type='date'
              value={user.joiningDate}
              onChange={onHandleChange}
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              name='previousCompany'
              value={user.previousCompany}
              onChange={onHandleChange}
              placeholder='Enter Previous Company Name'
            />
            <div className={styles.experienceSection}>
              <TextField
                name='experienceYears'
                value={user.experienceYears}
                onChange={onHandleChange}
                placeholder='Enter Years of Experience'
              />
              <TextField
                name='experienceMonths'
                value={user.experienceMonths}
                onChange={onHandleChange}
                placeholder='Enter Months of Experience'
              />
            </div>
          </Grid2>
        </Grid2>

        {/* Right section */}
        <Grid2 size={6} className={styles.CreateUserLeftContainer}>
          <Grid2 className={styles.userRoleContainer}>
            <Typography variant='h5' className={styles.createUserHeading}>
              User Role
            </Typography>
            <FormControl
              fullWidth
              variant='standard'
              error={Boolean(errors.role)}
            >
              <InputLabel id='role-label' htmlFor='role'>
                {t('Please select the role*')}
              </InputLabel>
              <Select
                labelId='role-label'
                id='role'
                value={selectedRole}
                onChange={onHandleRoleChange}
                error={Boolean(errors.role)}
              >
                <MenuItem value='admin'>{t('admin', 'Admin')}</MenuItem>
                <MenuItem value='lead'>{t('lead', 'Lead')}</MenuItem>
                <MenuItem value='employee'>
                  {t('employee', 'Employee')}
                </MenuItem>
                <MenuItem value='developer'>
                  {t('developer', 'Developer')}
                </MenuItem>
              </Select>
              {errors.role && (
                <Typography color='error'>{errors.role}</Typography>
              )}
            </FormControl>
          </Grid2>

          <Grid2 className={styles.usersPermissionContainer}>
            <Typography variant='h5' className={styles.createUserHeading}>
              Users Permission
            </Typography>
            <FormGroup>
              {permissionsList.map((section) => {
                const actions = section.actions.map((action) => {
                  const permissionKey =
                    `${section.key}${action}` as keyof Permissions;
                  return (
                    <FormControlLabel
                      key={permissionKey}
                      control={
                        <Checkbox
                          checked={permissions[permissionKey] || false}
                          onChange={() =>
                            onHandlePermissionChange(permissionKey)
                          }
                        />
                      }
                      label={action}
                    />
                  );
                });

                return (
                  <Box key={section.key} className={styles.permissionSection}>
                    <Typography>{section.label}</Typography>
                    {actions}
                  </Box>
                );
              })}
            </FormGroup>
          </Grid2>
        </Grid2>
      </Grid2>

      <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
        <Button variant='contained' color='primary' onClick={onHandleSubmit}>
          Save
        </Button>
      </Box>
    </Box>
  );
};

export default CreateUser;
